/*
 * This file is generated by jOOQ.
 */
package io.airbyte.db.instance.configs.jooq.tables;


import io.airbyte.db.instance.configs.jooq.Indexes;
import io.airbyte.db.instance.configs.jooq.Keys;
import io.airbyte.db.instance.configs.jooq.Public;
import io.airbyte.db.instance.configs.jooq.tables.records.AirbyteConfigsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AirbyteConfigs extends TableImpl<AirbyteConfigsRecord> {

    private static final long serialVersionUID = -1978862640;

    /**
     * The reference instance of <code>public.airbyte_configs</code>
     */
    public static final AirbyteConfigs AIRBYTE_CONFIGS = new AirbyteConfigs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AirbyteConfigsRecord> getRecordType() {
        return AirbyteConfigsRecord.class;
    }

    /**
     * The column <code>public.airbyte_configs.id</code>.
     */
    public final TableField<AirbyteConfigsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.airbyte_configs.config_id</code>.
     */
    public final TableField<AirbyteConfigsRecord, String> CONFIG_ID = createField(DSL.name("config_id"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.airbyte_configs.config_type</code>.
     */
    public final TableField<AirbyteConfigsRecord, String> CONFIG_TYPE = createField(DSL.name("config_type"), org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.airbyte_configs.config_blob</code>.
     */
    public final TableField<AirbyteConfigsRecord, JSONB> CONFIG_BLOB = createField(DSL.name("config_blob"), org.jooq.impl.SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.airbyte_configs.created_at</code>.
     */
    public final TableField<AirbyteConfigsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.airbyte_configs.updated_at</code>.
     */
    public final TableField<AirbyteConfigsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.airbyte_configs</code> table reference
     */
    public AirbyteConfigs() {
        this(DSL.name("airbyte_configs"), null);
    }

    /**
     * Create an aliased <code>public.airbyte_configs</code> table reference
     */
    public AirbyteConfigs(String alias) {
        this(DSL.name(alias), AIRBYTE_CONFIGS);
    }

    /**
     * Create an aliased <code>public.airbyte_configs</code> table reference
     */
    public AirbyteConfigs(Name alias) {
        this(alias, AIRBYTE_CONFIGS);
    }

    private AirbyteConfigs(Name alias, Table<AirbyteConfigsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AirbyteConfigs(Name alias, Table<AirbyteConfigsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AirbyteConfigs(Table<O> child, ForeignKey<O, AirbyteConfigsRecord> key) {
        super(child, key, AIRBYTE_CONFIGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AIRBYTE_CONFIGS_ID_IDX, Indexes.AIRBYTE_CONFIGS_TYPE_ID_IDX);
    }

    @Override
    public Identity<AirbyteConfigsRecord, Long> getIdentity() {
        return Keys.IDENTITY_AIRBYTE_CONFIGS;
    }

    @Override
    public UniqueKey<AirbyteConfigsRecord> getPrimaryKey() {
        return Keys.AIRBYTE_CONFIGS_PKEY;
    }

    @Override
    public List<UniqueKey<AirbyteConfigsRecord>> getKeys() {
        return Arrays.<UniqueKey<AirbyteConfigsRecord>>asList(Keys.AIRBYTE_CONFIGS_PKEY);
    }

    @Override
    public AirbyteConfigs as(String alias) {
        return new AirbyteConfigs(DSL.name(alias), this);
    }

    @Override
    public AirbyteConfigs as(Name alias) {
        return new AirbyteConfigs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AirbyteConfigs rename(String name) {
        return new AirbyteConfigs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AirbyteConfigs rename(Name name) {
        return new AirbyteConfigs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, JSONB, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
