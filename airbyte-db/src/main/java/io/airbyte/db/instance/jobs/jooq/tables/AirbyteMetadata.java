/*
 * This file is generated by jOOQ.
 */
package io.airbyte.db.instance.jobs.jooq.tables;


import io.airbyte.db.instance.jobs.jooq.Keys;
import io.airbyte.db.instance.jobs.jooq.Public;
import io.airbyte.db.instance.jobs.jooq.tables.records.AirbyteMetadataRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AirbyteMetadata extends TableImpl<AirbyteMetadataRecord> {

    private static final long serialVersionUID = 368756053;

    /**
     * The reference instance of <code>public.airbyte_metadata</code>
     */
    public static final AirbyteMetadata AIRBYTE_METADATA = new AirbyteMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AirbyteMetadataRecord> getRecordType() {
        return AirbyteMetadataRecord.class;
    }

    /**
     * The column <code>public.airbyte_metadata.key</code>.
     */
    public final TableField<AirbyteMetadataRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.airbyte_metadata.value</code>.
     */
    public final TableField<AirbyteMetadataRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.airbyte_metadata</code> table reference
     */
    public AirbyteMetadata() {
        this(DSL.name("airbyte_metadata"), null);
    }

    /**
     * Create an aliased <code>public.airbyte_metadata</code> table reference
     */
    public AirbyteMetadata(String alias) {
        this(DSL.name(alias), AIRBYTE_METADATA);
    }

    /**
     * Create an aliased <code>public.airbyte_metadata</code> table reference
     */
    public AirbyteMetadata(Name alias) {
        this(alias, AIRBYTE_METADATA);
    }

    private AirbyteMetadata(Name alias, Table<AirbyteMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private AirbyteMetadata(Name alias, Table<AirbyteMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AirbyteMetadata(Table<O> child, ForeignKey<O, AirbyteMetadataRecord> key) {
        super(child, key, AIRBYTE_METADATA);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AirbyteMetadataRecord> getPrimaryKey() {
        return Keys.AIRBYTE_METADATA_PKEY;
    }

    @Override
    public List<UniqueKey<AirbyteMetadataRecord>> getKeys() {
        return Arrays.<UniqueKey<AirbyteMetadataRecord>>asList(Keys.AIRBYTE_METADATA_PKEY);
    }

    @Override
    public AirbyteMetadata as(String alias) {
        return new AirbyteMetadata(DSL.name(alias), this);
    }

    @Override
    public AirbyteMetadata as(Name alias) {
        return new AirbyteMetadata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AirbyteMetadata rename(String name) {
        return new AirbyteMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AirbyteMetadata rename(Name name) {
        return new AirbyteMetadata(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
