/*
 * This file is generated by jOOQ.
 */
package io.airbyte.db.instance.jobs.jooq.tables;


import io.airbyte.db.instance.jobs.jooq.Indexes;
import io.airbyte.db.instance.jobs.jooq.Keys;
import io.airbyte.db.instance.jobs.jooq.Public;
import io.airbyte.db.instance.jobs.jooq.enums.AttemptStatus;
import io.airbyte.db.instance.jobs.jooq.tables.records.AttemptsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attempts extends TableImpl<AttemptsRecord> {

    private static final long serialVersionUID = 530914848;

    /**
     * The reference instance of <code>public.attempts</code>
     */
    public static final Attempts ATTEMPTS = new Attempts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttemptsRecord> getRecordType() {
        return AttemptsRecord.class;
    }

    /**
     * The column <code>public.attempts.id</code>.
     */
    public final TableField<AttemptsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.attempts.job_id</code>.
     */
    public final TableField<AttemptsRecord, Long> JOB_ID = createField(DSL.name("job_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.attempts.attempt_number</code>.
     */
    public final TableField<AttemptsRecord, Integer> ATTEMPT_NUMBER = createField(DSL.name("attempt_number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.attempts.log_path</code>.
     */
    public final TableField<AttemptsRecord, String> LOG_PATH = createField(DSL.name("log_path"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.attempts.output</code>.
     */
    public final TableField<AttemptsRecord, JSONB> OUTPUT = createField(DSL.name("output"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.attempts.status</code>.
     */
    public final TableField<AttemptsRecord, AttemptStatus> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.airbyte.db.instance.jobs.jooq.enums.AttemptStatus.class), this, "");

    /**
     * The column <code>public.attempts.created_at</code>.
     */
    public final TableField<AttemptsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.attempts.updated_at</code>.
     */
    public final TableField<AttemptsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.attempts.ended_at</code>.
     */
    public final TableField<AttemptsRecord, OffsetDateTime> ENDED_AT = createField(DSL.name("ended_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.attempts</code> table reference
     */
    public Attempts() {
        this(DSL.name("attempts"), null);
    }

    /**
     * Create an aliased <code>public.attempts</code> table reference
     */
    public Attempts(String alias) {
        this(DSL.name(alias), ATTEMPTS);
    }

    /**
     * Create an aliased <code>public.attempts</code> table reference
     */
    public Attempts(Name alias) {
        this(alias, ATTEMPTS);
    }

    private Attempts(Name alias, Table<AttemptsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attempts(Name alias, Table<AttemptsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Attempts(Table<O> child, ForeignKey<O, AttemptsRecord> key) {
        super(child, key, ATTEMPTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_ATTEMPT_IDX);
    }

    @Override
    public Identity<AttemptsRecord, Long> getIdentity() {
        return Keys.IDENTITY_ATTEMPTS;
    }

    @Override
    public UniqueKey<AttemptsRecord> getPrimaryKey() {
        return Keys.ATTEMPTS_PKEY;
    }

    @Override
    public List<UniqueKey<AttemptsRecord>> getKeys() {
        return Arrays.<UniqueKey<AttemptsRecord>>asList(Keys.ATTEMPTS_PKEY);
    }

    @Override
    public Attempts as(String alias) {
        return new Attempts(DSL.name(alias), this);
    }

    @Override
    public Attempts as(Name alias) {
        return new Attempts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attempts rename(String name) {
        return new Attempts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attempts rename(Name name) {
        return new Attempts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Integer, String, JSONB, AttemptStatus, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
