/*
 * This file is generated by jOOQ.
 */
package io.airbyte.db.instance.jobs.jooq.tables;


import io.airbyte.db.instance.jobs.jooq.Keys;
import io.airbyte.db.instance.jobs.jooq.Public;
import io.airbyte.db.instance.jobs.jooq.enums.JobConfigType;
import io.airbyte.db.instance.jobs.jooq.enums.JobStatus;
import io.airbyte.db.instance.jobs.jooq.tables.records.JobsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jobs extends TableImpl<JobsRecord> {

    private static final long serialVersionUID = -514048403;

    /**
     * The reference instance of <code>public.jobs</code>
     */
    public static final Jobs JOBS = new Jobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobsRecord> getRecordType() {
        return JobsRecord.class;
    }

    /**
     * The column <code>public.jobs.id</code>.
     */
    public final TableField<JobsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.jobs.config_type</code>.
     */
    public final TableField<JobsRecord, JobConfigType> CONFIG_TYPE = createField(DSL.name("config_type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.airbyte.db.instance.jobs.jooq.enums.JobConfigType.class), this, "");

    /**
     * The column <code>public.jobs.scope</code>.
     */
    public final TableField<JobsRecord, String> SCOPE = createField(DSL.name("scope"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.jobs.config</code>.
     */
    public final TableField<JobsRecord, JSONB> CONFIG = createField(DSL.name("config"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.jobs.status</code>.
     */
    public final TableField<JobsRecord, JobStatus> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(io.airbyte.db.instance.jobs.jooq.enums.JobStatus.class), this, "");

    /**
     * The column <code>public.jobs.started_at</code>.
     */
    public final TableField<JobsRecord, OffsetDateTime> STARTED_AT = createField(DSL.name("started_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.jobs.created_at</code>.
     */
    public final TableField<JobsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.jobs.updated_at</code>.
     */
    public final TableField<JobsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.jobs</code> table reference
     */
    public Jobs() {
        this(DSL.name("jobs"), null);
    }

    /**
     * Create an aliased <code>public.jobs</code> table reference
     */
    public Jobs(String alias) {
        this(DSL.name(alias), JOBS);
    }

    /**
     * Create an aliased <code>public.jobs</code> table reference
     */
    public Jobs(Name alias) {
        this(alias, JOBS);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jobs(Name alias, Table<JobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Jobs(Table<O> child, ForeignKey<O, JobsRecord> key) {
        super(child, key, JOBS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<JobsRecord, Long> getIdentity() {
        return Keys.IDENTITY_JOBS;
    }

    @Override
    public UniqueKey<JobsRecord> getPrimaryKey() {
        return Keys.JOBS_PKEY;
    }

    @Override
    public List<UniqueKey<JobsRecord>> getKeys() {
        return Arrays.<UniqueKey<JobsRecord>>asList(Keys.JOBS_PKEY);
    }

    @Override
    public Jobs as(String alias) {
        return new Jobs(DSL.name(alias), this);
    }

    @Override
    public Jobs as(Name alias) {
        return new Jobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(String name) {
        return new Jobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jobs rename(Name name) {
        return new Jobs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, JobConfigType, String, JSONB, JobStatus, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
